'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var camelToDash = require('./camelToDash');

module.exports = function withImportantSupport(Comp) {
  return function (_React$Component) {
    _inherits(WithImportantSupportWrapper, _React$Component);

    function WithImportantSupportWrapper(props) {
      _classCallCheck(this, WithImportantSupportWrapper);

      var _this = _possibleConstructorReturn(this, (WithImportantSupportWrapper.__proto__ || Object.getPrototypeOf(WithImportantSupportWrapper)).call(this, props));

      _this.handleRef = function (ref) {
        _this.ref = ref;
        _this.element = _reactDom2.default.findDOMNode(ref);
      };
      return _this;
    }

    // public


    _createClass(WithImportantSupportWrapper, [{
      key: 'getRef',
      value: function getRef() {
        return this.ref;
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.setImportantStyles();
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate() {
        this.setImportantStyles();
      }
    }, {
      key: 'setImportantStyles',
      value: function setImportantStyles() {
        var _this2 = this;

        if (!this.props.style) return;
        Object.keys(this.props.style).forEach(function (key) {
          var value = _this2.props.style[key];
          if (value.indexOf('!important') === -1) return;
          var dashedKey = camelToDash(key);
          _this2.element.style.setProperty(dashedKey, value.replace(/\s*!important/g, ''), 'important');
        });
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(Comp, _extends({ ref: this.handleRef }, this.props));
      }
    }]);

    return WithImportantSupportWrapper;
  }(_react2.default.Component);
};